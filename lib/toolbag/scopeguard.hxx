namespace toolbag 
{
	/////////////////////////////////////////////////////////////////////////////////////////////
    // scope_guard_impl<T>
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T> 
	scope_guard_impl<T>::scope_guard_impl(const T & c)
		: m_functor( c )
	{}
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T> 
	scope_guard_impl<T>::scope_guard_impl(const scope_guard_impl & c)
		: m_functor( c.m_functor )
	{}
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T>
	scope_guard_impl<T>::~scope_guard_impl()
	{
		if (!is_dismissed())
			try 
            {
                m_functor(); 
            }	
            catch (...) {}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T>
	scope_guard_impl<T> make_scope_guard(const T & f)
	{	return scope_guard_impl<T>(f);	}

}	// toolbag
