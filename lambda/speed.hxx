namespace om636
{
    /////////////////////////////////////////////////////////////////////////////////////////////
    // speed_layer<T>
    /////////////////////////////////////////////////////////////////////////////////////////////
    template<class T>
    void speed_layer<T>::clear()
    {
    //    std::for_each( m_views.begin(), m_views.end(), std::mem_fn( & view_type::clear ) );
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    // real_time_view<T>
    /////////////////////////////////////////////////////////////////////////////////////////////
    template<class T>
    template<class U>
    real_time_view<T>::real_time_view( U & context )
    : m_detach( [&]() { context.speed().detach( this ); } )
    {
        context.speed().attach( this );
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////
    template<class T>
    real_time_view<T>::~real_time_view()
    {
        m_detach();
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////
    template<class T>
    void real_time_view<T>::insert(value_type value)
    {
        std::cout << "real_time_view push " << value << std::endl;
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////
    template<class T>
    void real_time_view<T>::clear()
    {}
    
}   // om636