namespace toolbag
{
	/////////////////////////////////////////////////////////////////////////////////////////////
	// message_base
	/////////////////////////////////////////////////////////////////////////////////////////////
	message_base::~message_base() 
	{}
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	// static_msg
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T>
	static_msg< T >::static_msg()
	: message_base()
	, msg()
	{}

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T>
	static_msg< T >::static_msg(T m) 
	: message_base()
	, msg(m) 
	{}
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T>
	static_msg< T >::static_msg( const static_msg & c ) 
	: message_base( c )
	, msg(c.msg) 
	{}
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T>
	void static_msg< T >::print() 
	{ 
		std::cout << msg; 
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class T>
	message_base * static_msg< T >::copy() 
	{ 
		return new static_msg(*this); 
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	// message
	/////////////////////////////////////////////////////////////////////////////////////////////
	template<int N>
	message::message( const char(&m)[N] ) : msg( new static_msg< const char(&)[N] >(m) ) 
	{}
		
}	// toolbag