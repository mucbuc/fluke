#ifdef __HEADER_TRANSLATION_UNIT__

namespace toolbag
{
	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	vertex<P, T>::vertex(const value_type & v) 
		: value_( v )
	{}
		
	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	vertex<P, T>::vertex(const vertex & v) 
		: value_( v.value_ ) 
		, base_type( v.begin(), v.end() )
	{}
		
	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	vertex<P, T>::vertex() 
	{
		value_.first.resize( 3 );
	}

	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	vertex<P, T>& vertex<P, T>::operator=(vertex v)
	{
		swap( v );
		return *this;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	typename vertex<P, T>::value_type& vertex<P, T>::value()
	{	return value_;	}

	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	const typename vertex<P, T>::value_type& vertex<P, T>::value() const
	{	return value_;	}

	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	void vertex<P, T>::swap(vertex & v)
	{
		std::swap( value_, v.value_ ); 
		base_type::swap( v );
	}

	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
	template<class P, class T>
	void swap(vertex<P, T> & v, vertex<P, T> & w)
	{	v.swap( w ); }	

} // toolbag

#endif // __HEADER_TRANSLATION_UNIT__ 
